
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/WebKit/public/platform/modules/fetch/fetch_api_request.mojom
//

package org.chromium.blink.mojom;

import org.chromium.base.annotations.SuppressFBWarnings;
import org.chromium.mojo.bindings.DeserializationException;


public final class FetchApiRequest extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 96;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(96, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public int mode;
    public boolean isMainResourceLoad;
    public int requestContextType;
    public int frameType;
    public org.chromium.url.mojom.Url url;
    public String method;
    public java.util.Map<String, String> headers;
    public String blobUuid;
    public long blobSize;
    public Referrer referrer;
    public int credentialsMode;
    public int redirectMode;
    public String clientId;
    public boolean isReload;
    public int fetchType;

    private FetchApiRequest(int version) {
        super(STRUCT_SIZE, version);
    }

    public FetchApiRequest() {
        this(0);
    }

    public static FetchApiRequest deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static FetchApiRequest deserialize(java.nio.ByteBuffer data) {
        if (data == null)
            return null;

        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static FetchApiRequest decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        FetchApiRequest result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            result = new FetchApiRequest(mainDataHeader.elementsOrVersion);
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.mode = decoder0.readInt(8);
                    FetchRequestMode.validate(result.mode);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.isMainResourceLoad = decoder0.readBoolean(12, 0);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.isReload = decoder0.readBoolean(12, 1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.requestContextType = decoder0.readInt(16);
                    RequestContextType.validate(result.requestContextType);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.frameType = decoder0.readInt(20);
                    RequestContextFrameType.validate(result.frameType);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                result.url = org.chromium.url.mojom.Url.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.method = decoder0.readString(32, false);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                {
                    decoder1.readDataHeaderForMap();
                    String[] keys0;
                    String[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                values0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    result.headers = new java.util.HashMap<String, String>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.headers.put(keys0[index0],  values0[index0]);
                    }
                }
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.blobUuid = decoder0.readString(48, true);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.blobSize = decoder0.readLong(56);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
                result.referrer = Referrer.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.credentialsMode = decoder0.readInt(72);
                    FetchCredentialsMode.validate(result.credentialsMode);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.redirectMode = decoder0.readInt(76);
                    FetchRedirectMode.validate(result.redirectMode);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.clientId = decoder0.readString(80, true);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.fetchType = decoder0.readInt(88);
                    ServiceWorkerFetchType.validate(result.fetchType);
            }
        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(mode, 8);
        
        encoder0.encode(isMainResourceLoad, 12, 0);
        
        encoder0.encode(isReload, 12, 1);
        
        encoder0.encode(requestContextType, 16);
        
        encoder0.encode(frameType, 20);
        
        encoder0.encode(url, 24, false);
        
        encoder0.encode(method, 32, false);
        
        if (headers == null) {
            encoder0.encodeNullPointer(40, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(40);
            int size0 = headers.size();
            String[] keys0 = new String[size0];
            String[] values0 = new String[size0];
            int index0 = 0;
            for (java.util.Map.Entry<String, String> entry0 : headers.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
        }
        
        encoder0.encode(blobUuid, 48, true);
        
        encoder0.encode(blobSize, 56);
        
        encoder0.encode(referrer, 64, false);
        
        encoder0.encode(credentialsMode, 72);
        
        encoder0.encode(redirectMode, 76);
        
        encoder0.encode(clientId, 80, true);
        
        encoder0.encode(fetchType, 88);
    }

    /**
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(Object object) {
        if (object == this)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;
        FetchApiRequest other = (FetchApiRequest) object;
        if (this.mode!= other.mode)
            return false;
        if (this.isMainResourceLoad!= other.isMainResourceLoad)
            return false;
        if (this.requestContextType!= other.requestContextType)
            return false;
        if (this.frameType!= other.frameType)
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.url, other.url))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.method, other.method))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.headers, other.headers))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.blobUuid, other.blobUuid))
            return false;
        if (this.blobSize!= other.blobSize)
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.referrer, other.referrer))
            return false;
        if (this.credentialsMode!= other.credentialsMode)
            return false;
        if (this.redirectMode!= other.redirectMode)
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.clientId, other.clientId))
            return false;
        if (this.isReload!= other.isReload)
            return false;
        if (this.fetchType!= other.fetchType)
            return false;
        return true;
    }

    /**
     * @see Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = prime + getClass().hashCode();
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mode);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(isMainResourceLoad);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(requestContextType);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(frameType);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(url);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(method);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(headers);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(blobUuid);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(blobSize);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(referrer);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(credentialsMode);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(redirectMode);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(clientId);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(isReload);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(fetchType);
        return result;
    }
}