
// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     java_cpp_enum.py
// From
//     ../../third_party/WebKit/public/platform/WebInputEvent.h

package org.chromium.blink_public.web;

import android.support.annotation.IntDef;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@IntDef({
    WebInputEventModifier.kShiftKey, WebInputEventModifier.kControlKey,
    WebInputEventModifier.kAltKey, WebInputEventModifier.kMetaKey, WebInputEventModifier.kIsKeyPad,
    WebInputEventModifier.kIsAutoRepeat, WebInputEventModifier.kLeftButtonDown,
    WebInputEventModifier.kMiddleButtonDown, WebInputEventModifier.kRightButtonDown,
    WebInputEventModifier.kCapsLockOn, WebInputEventModifier.kNumLockOn,
    WebInputEventModifier.kIsLeft, WebInputEventModifier.kIsRight,
    WebInputEventModifier.kIsTouchAccessibility, WebInputEventModifier.kIsComposing,
    WebInputEventModifier.kAltGrKey, WebInputEventModifier.kFnKey, WebInputEventModifier.kSymbolKey,
    WebInputEventModifier.kScrollLockOn, WebInputEventModifier.kIsCompatibilityEventForTouch,
    WebInputEventModifier.kBackButtonDown, WebInputEventModifier.kForwardButtonDown,
    WebInputEventModifier.kKeyModifiers, WebInputEventModifier.kNoModifiers
})
@Retention(RetentionPolicy.SOURCE)
public @interface WebInputEventModifier {
  /**
   * modifiers for all events:
   */
  int kShiftKey = 1 << 0;
  int kControlKey = 1 << 1;
  int kAltKey = 1 << 2;
  int kMetaKey = 1 << 3;
  /**
   * modifiers for keyboard events:
   */
  int kIsKeyPad = 1 << 4;
  int kIsAutoRepeat = 1 << 5;
  /**
   * modifiers for mouse events:
   */
  int kLeftButtonDown = 1 << 6;
  int kMiddleButtonDown = 1 << 7;
  int kRightButtonDown = 1 << 8;
  /**
   * Toggle modifers for all events.
   */
  int kCapsLockOn = 1 << 9;
  int kNumLockOn = 1 << 10;
  int kIsLeft = 1 << 11;
  int kIsRight = 1 << 12;
  /**
   * Indicates that an event was generated on the touch screen while touch accessibility is enabled,
   * so the event should be handled by accessibility code first before normal input event
   * processing.
   */
  int kIsTouchAccessibility = 1 << 13;
  int kIsComposing = 1 << 14;
  int kAltGrKey = 1 << 15;
  int kFnKey = 1 << 16;
  int kSymbolKey = 1 << 17;
  int kScrollLockOn = 1 << 18;
  /**
   * Whether this is a compatibility event generated due to a native touch event. Mouse events
   * generated from touch events will set this.
   */
  int kIsCompatibilityEventForTouch = 1 << 19;
  int kBackButtonDown = 1 << 20;
  int kForwardButtonDown = 1 << 21;
  /**
   * The set of non-stateful modifiers that specifically change the interpretation of the key being
   * pressed. For example; IsLeft, IsRight, IsComposing don't change the meaning of the key being
   * pressed. NumLockOn, ScrollLockOn, CapsLockOn are stateful and don't indicate explicit depressed
   * state.
   */
  int kKeyModifiers = kSymbolKey | kFnKey | kAltGrKey | kMetaKey | kAltKey | kControlKey | kShiftKey;
  int kNoModifiers = 0;
}
